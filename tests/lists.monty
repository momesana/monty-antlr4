# Empty list.
[]

# List with one element.
[1]

# List with three elements.
[1, 2, 3]

# Declare variable with a list.
let list := [1, 2, 3, 4, 5] # Type is [Int] or List<Int>.

list.first() = 1
list.last() = 5
list.at(2) = 3

let list2 := ["Hello", "World"] # Type is [Str].
let list3 := ['a', 'b', 'c'] # Type is [Char].

# Construct lists of floats.
let fl := [1, 2, 3, 4, 5] as [Float]
let fl2 := [1.0, 2.0, 3.0, 4.0, 5.0]

# Construct list from range.
[18..28]

# Infinite list. Evaluating it will never terminate.
[18..]

# Operating on subsets, however, does terminate.
[1..].take(10)

# `in' is a right-evaluated operator. It checks whether the value on the
# LHS is existent in the list of the RHS. Currently, `in' is the only
# right-evaluated operator.
let i := 3
i in [2..10]

# Other methods that are defined on a list:
[1, 2, 3].sum()
[1, 2, 3].product()
[[1, 2, 3], [4, 5, 6], [7, 8, 9]].flatten() = [1, 2, 3, 4, 5, 6, 7, 8, 9]
[2..10].contains(i)
[1, 2, 3].reverse()
"abc".reverse()