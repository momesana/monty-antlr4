# Anonymous tuple.
("first", 2, True)

# Access first element of the tuple.
("first", 2, True)[0] = "first"

# Access second element of the tuple.
let tuple := ("first", 2, True)
tuple[1]

# String concatenation.
tuple[0] + tuple[1] + tuple[2]

# Also:
tuple.join()

# Accessing tuple values by their indexes can be somewhat cumbersome. To
# alleviate this, there are named tuples:
let tuple := (width: 3, length: 1.5, colour: "orange")
tuple.length = 1.5

# Tuples can also be used in lists:
let list := [
	(name: "Linus Torvalds", address: "Santa Clara, CA 95054", nationality: "Finnish"),
	(name: "Bill Gates", address: "Medina, WA 98039", nationality: "American")
]

# The access via keywords is only usable in the current context. If the list
# is passed to a method, the information is lost.

# Shorter form:
let list[(name, address, nationality)] := [
	("Linus Torvalds", "Santa Clara, CA 95054", "Finnish"),
	("Bill Gates", "Medina, WA 98039", "American")
]

list[0].name
list[0].address

# Tuples for pattern matching:

# Extract a tuple.
let tuple := ("a", 1, True)
let (a, b, c) := tuple
a = 1
b = True
c = "a"

# Extract a tuple partially.
let tuple := ("a", 1, True)
let (a,,) := tuple
let (,b,) := tuple
let (,,c) := tuple

# Shorter:
let (a,) := tuple
let (,b) := tuple
let (,,c) := tuple