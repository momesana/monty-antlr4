# The following class is defined internally by Monty and used for some type
# classes such as `Enumeration'.
abstract class Ordering<T>:
	Int compare(T value)
	op Bool < (T value): return self.compare(value) < 0
	op Bool > (T value): return self.compare(value) > 0
	op Bool <=(T value): return self.compare(value) <= 0
	op Bool >=(T value): return self.compare(value) >= 0

# --------------------
# Operator overloading
# --------------------

# Implement the class `Ordering'.
class Money(Int amount) extends Ordering<Money>:
	Int compare(Money value):
		return self.amount <=> value.amount

# Overload the plus operator.
class Meter(Double value):
	op Meter +(Meter m):
		return Meter(m.value + value)

# ----------------
# ++, -- operators
# ----------------

# The var++ operator increases a value by 1. This operator cannot be overwritten.
let i := 1
a++
i = 2

# The ++ operator is used to move a stream or iterator ahead by one element.
let iter := [1..3].iter()
iter.cur() = 1
iter++
iter.cur() = 2

# ------------
# <=> operator
# ------------

# <=> is the compare operator. It is equivalent to calling the method compare()
# on an object that implements the trait `Ordering'.